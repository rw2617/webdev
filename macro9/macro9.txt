HTML & CSS
A content panel that asks the user to provide a nickname. This panel should include a button that 
can be used to save the nickname. This panel should be visible when the page loads.
A content panel that displays the previous chat history, a text box for new chat messages and a 
button. This panel should be invisible when the page loads.
Format your page so that it's visually appealing, though you don't need to go too crazy with this.
Back-end setup
You can choose to use either databases or text files as a data storage mechanism for this project. 
You don't have to use both techniques - just choose the one you feel most comfortable using.


Text files
Set up a 'data' folder - make sure you have full permissions to read and write to this folder. 
You will want your 'data' folder stored inside of your 'public_html' folder so that a client's 
browser can access it directly using a fetch request.
Set up a 'config.php' file that contains a path variable that points to this folder. You can use 
the getcwd() function in PHP to easily identify the full path to the folder.


Database
Set up a 'database' folder - make sure you have full permissions to read and write to this folder. 
You can choose where you want to store this folder, but the safest place to store it would be 
outside of your 'public_html' folder so users can't directly access your database file from a web browser
Set up a new SQLite database in this folder with a table that will store your chat messages. The 
table can be organized as follows:
id: INTEGER PRIMARY KEY AUTOINCREMENT
name: TEXT
message: TEXT
Set up a 'config.php' file that contains a path variable that points to this folder. If the folder is 
stored inside of your public_html folder you can use the getcwd() function in PHP to identify the full 
path to the folder.

Application Logic
"Nickname" panel: When the user supplies a nickname the program should check save it and show the 
"chat room" panel. Note that you don't have to do any checks here (e.g. ensuring that the nickname 
isn't in use by another user) - this feature can be attempted as one of the advanced features below.
"Chat room" panel: When the user types in a message and clicks submit / hits enter a fetch request 
should be generated to a PHP script (your API) - you will need to send the message they typed and 
their nickname to this script.
This script should accept this information and ensure that a valid message was sent (1 character 
or more can be considered a valid message). If the message is valid it should be stored in some way 
(either in your text file or in your database). Ensure that the user's name is stored along with the 
message. If the message is not valid send some message back to the client and display an appropriate 
error message to the user (i.e. "message too short")

After a message has been sent successfully your program should clear the input box.
Set up another JavaScript function called 'getChatMessages' - this function should initiate a fetch 
request to the server to obtain all previously stored chat messages. Use this information to populate 
the textarea with the previous chat history.
Set up some kind of callback structure (setTimeout or setInterval) to repeatedly check for new chat 
messages. You can do this every 3 seconds (don't go any faster than this). If you are using text 
files and you are directly accessing your file via a fetch request you may need to prevent your 
browser from caching the response. You can also do this by appending a random number as a GET variable 
to the URL to make the browser think that you are making a different request to the server 
(e.g. chatlog.txt?nocache=12345)
Set up the textarea so that when new data comes in it automatically scrolls to the bottom of the box so 
the user can see the most recent message. You can look up how to do this online (it will require some CSS) 
- not shown in the video above
If the user is currently scrolling inside of the textarea to read previous messages you should prevent 
the auto-scroll feature from happening, otherwise the user's textarea will "jump". Hint - detect if the 
user is currently hovering over the textbox - if so, prevent the textbox from scrolling down to the 
bottom of the element - not shown in the video above

Nickname management:
Let the user sign up for an account before they can chat. To do this they will need to supply a 
username and a password.
Send this information to a PHP script which will save this information into a database.
Next, write a feature that lets the user log in. To do this they will need to supply a username and a 
password. This information should be sent to the server to be validated.
If the login credentials are correct the user should be sent to the chatroom, otherwise an error message 
should appear.